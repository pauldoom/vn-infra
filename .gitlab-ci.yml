---
image: hashicorp/terraform:latest

# NOTE - New accounts must be initialized outside of GitLab CI/CD
# to setup the S3 state bucket and DynamoDB lock table.
# See bin/aws_init

variables:
  # Remianing items should be defined in project variables
  AWS_ACCESS_KEY_ID: setme
  AWS_SECRET_ACCESS_KEY: setme
  AWS_ACOUNT_ID: setme
  AWS_DEFAULT_REGION: setme
  # TODO - Too much power!  Should have a developer role user for submitting MRs
  GITLAB_PRIVATE_TOKEN: setme
  TF_VAR_infra_name: setme
  TF_VAR_root_zone: setme
  TF_VAR_static_site_fqdn: setme
  TF_VAR_static_dns_record_file: setme_as_file

stages:
  - test
  - build
  - deploy
  - dependency_check
  - dependency_request

before_script:
  # Default setup for most stages
  - mkdir -p plans
  - . bin/commonlib
  - init_tf_vars $TF_VAR_infra_name $CI_ENVIRONMENT_NAME
  - cd stacks/$CI_ENVIRONMENT_NAME
  - terraform init
    -backend-config="bucket=${TF_VAR_state_bucket}"
    -backend-config="key=${TF_VAR_stack_name}"
    -backend-config="dynamodb_table=${TF_VAR_lock_table}"
    -backend-config="region=${TF_VAR_region}"

# Universal stages
test:fmt:
  stage: test
  except:
    - schedules
  before_script: []
  script:
    - terraform fmt -recursive -diff -check

# Run tfsec on everything at
test:tfsec:
  stage: test
  image: tfsec/tfsec-ci
  except:
    - schedules
  before_script:
    - . bin/commonlib
    - init_tf_vars $TF_VAR_infra_name account
  script:
    - tfsec stacks

# Templates
.plan:
  except:
    - schedules
  script:
    - terraform plan -detailed-exitcode
      -out ${CI_PROJECT_DIR}/plans/${CI_ENVIRONMENT_NAME}.plan
      || exit_code=$?
    - case $exit_code in
        1) exit 1;;
        2) echo "CHANGED=true" >> ${CI_PROJECT_DIR}/changed.env;;
        *) echo "CHANGED=false" >> ${CI_PROJECT_DIR}/changed.env;;
      esac
  artifacts:
    paths:
      # Saved plans
      - plans
      # Local copy of .terraform dir
      - stacks/${CI_ENVIRONMENT_NAME}/.terraform
      # Zipped function code
      - functions/*.zip
    reports:
      dotenv: changed.env

.apply:
  # only/except not allowed with rules, so schedule skipped here
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE != "schedule"'
      when: manual
  script:
    - if [ $CHANGED == "false" ]; then echo "No change"; exit 0; fi
    - terraform apply -auto-approve
      ${CI_PROJECT_DIR}/plans/${CI_ENVIRONMENT_NAME}.plan

.update_terraform_lock:
  only:
    - schedules
  before_script:
    - . bin/commonlib
    - init_tf_vars $TF_VAR_infra_name $CI_ENVIRONMENT_NAME
    - cd stacks/$CI_ENVIRONMENT_NAME
  script:
    - rm -f .terraform.lock.hcl
    - terraform init
      -backend-config="bucket=${TF_VAR_state_bucket}"
      -backend-config="key=${TF_VAR_stack_name}"
      -backend-config="dynamodb_table=${TF_VAR_lock_table}"
      -backend-config="region=${TF_VAR_region}"
  artifacts:
    paths:
     - stacks/${CI_ENVIRONMENT_NAME}/.terraform.lock.hcl

.create_update_mr:
  only:
    - schedules
  image: registry.gitlab.com/gitlab-automation-toolkit/gitlab-auto-mr
  before_script: []
  script:
    - git checkout -b maintenance-xyz/
    - git add -A
    - git diff --exit-code --staged && echo "No changes detected" && exit 0
    - git commit -m "${CI_ENVIRONMENT_NAME} dependency update ${CI_JOB_STARTED_AT}"
    # - git push
    # TODO - This uses a Project Access Token with API and repo write access - Not secure enough!
    - gitlab_auto_mr --source-branch maintenance-xyz -t main -c WIP -d .gitlab/mr_templates/auto_dependency.md -r -s

# Prod account level resources
plan:account:
  extends: .plan
  environment: account
  stage: build

apply:account:
  extends: .apply
  environment: account
  stage: deploy
  needs:
    - job: plan:account
      artifacts: true

# stages/account maintenance
# TODO - Needs work
# update_terraform_lock:account:
#   extends: .update_terraform_lock
#   environment: account
#   stage: dependency_check

# create_update_mr:account:
#   extends: .create_update_mr
#   environment: account
#   stage: dependency_request
#   needs:
#     - job: update_terraform_lock:account
#       artifacts: true

# Static web site
plan:web:
  extends: .plan
  environment: web
  stage: build

apply:web:
  extends: .apply
  environment: web
  stage: deploy
  needs:
    - job: plan:web
      artifacts: true
