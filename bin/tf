#!/bin/bash

# Terraform wrapper for use with AWS S3 that ensures a state bucket
# and lock table exist and are tracked in state, then runs the requested
# terraform command.

set -euo pipefail

usage() {
  cat >&2 <<EOM
usage: $(basename "$0") [STACK] [TERRAFORM_ARGUMENTS]

Wrapper for Terraform usage with S3 state backing.

(Note - Run aws_init to provision S3/DynamoDB)

STACK: Stack name under stacks/ directory
TERRAFORM_ARGUMENTS: All the usual args like plan, apply, etc

Requires AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY to be set.
EOM
}

cleanup() {
    popd > /dev/null 2>&1
}

main() {
    if [ -z "${1:-}" ]; then
        usage
        exit 1
    fi

    STACK=$1

    SCRIPT_DIR=$(dirname "$0")
    . $SCRIPT_DIR/commonlib

    check_required_bins terraform

    FULL_STACK_DIR=$(dirname $SCRIPT_DIR)/stacks/$STACK

    if [ ! -d $FULL_STACK_DIR ]; then
        echo "FATAL: No stack directory found at $FULL_STACK_DIR"
        exit 1
    fi

    INFRA_NAME=${INFRA_NAME:-$(cat $SCRIPT_DIR/../.infra_name)}

    # Initialize TF_VAR_ variables
    init_tf_vars $INFRA_NAME $STACK

    # Enter our actual stack dir
    pushd $FULL_STACK_DIR > /dev/null 2>&1

    # Setup to return to the current dir after exit
    trap cleanup EXIT

    # Initialize Terraform with backend
    terraform_init $TF_VAR_region $TF_VAR_state_bucket $TF_VAR_lock_table $TF_VAR_stack_name

    # Track state bucket and locking table only for special "account" level stack
    if [ "$STACK" = "account" ]; then
        track_state_bucket $TF_VAR_state_bucket
        track_lock_table $TF_VAR_lock_table
    fi

    # And now do what was asked
    shift 1
    terraform $*
}

main $*
